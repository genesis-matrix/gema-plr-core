##
##
##



##_META:
##  purpose:
##    - traverse the pillar from the 'label' root node, integrating new data into the pillar along the way
##    - the created data structure will then be used for operations, from defining the highstate to providing per-invocation per-sls pillar overrides
##  desc:
##    - parsed as follows:
##      question(string)
##      question/question_answer
##        question/question_answer(string)
##        question/question_answer(dict)
##          question/question_answer(dict)/question_answer_detail(string)
##          question/question_answer(dict)/question_answer_detail(string)
##          question/question_answer(dict)/question_answer_detail(string)
##        question/question_answer(list)
##          question/question_answer(list)/question_answer_detail(string)
##          question/question_answer(list)/question_answer_detail(string)
##          question/question_answer(list)/question_answer_detail(string)
##  refs:
##    - https://docs.saltstack.com/en/latest/ref/pillar/all/salt.pillar.stack.html
##  todo:
##    - [ ] verify the pillar.file_exists call is working as desired
##



## <JINJA>
{%- set label_namespace = pillar.get('namespace:gema_label', 'label') %}
{%- set lookup_namespace = pillar.get('namespace:gema_lookup', 'lookup') %}
## </JINJA>



{%- if pillar[label_namespace] is mapping %}
  #
  ##
  ###
  #### namespace is mapping
  ###
  ##
  #
  {%- for question, question_answer in pillar[label_namespace].iteritems() %}
{##}{{ lookup_namespace }}/{{ question }}.sls
{##}{{lookup_namespace }}/{{ question }}/init.sls
    #
    {%- if question_answer is defined %}
      #
      ##
      ### question_answer is string
      ##
      #
      {%- if question_answer is string %}
{#   -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}.sls
{#   -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/init.sls
      #
      ##
      ### question_answer is dict
      ##
      #
      {%- elif question_answer is mapping %}
        {%- for question_answer_detail, discard_var in question_answer.iteritems %}
          {%- if question_answer_detail is defined %}
            #
            ## question_answer_detail is string
            #
            {%- if question_answer_detail is string %}
{#         -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail }}.sls
{#         -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail }}/init.sls
            #
            ## question_answer_detail is dict
            #
            {%- elif question_answer_detail is mapping %}
              {%- for question_answer_detail_iter, discard_var in question_answer_detail.iteritems() %}
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}.sls
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}/init.sls
              {%- endfor %}
            #
            ## question_answer_detail is list
            #
            {%- elif question_answer_detail is sequence and question_answer_detail is not string %}
              {% for question_answer_detail_iter in question_answer_detail if question_answer_detail_iter is defined %}
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}.sls
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}/init.sls
              {%- endfor %}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
      #
      ##
      ### question_answer is list
      ##
      #
      {%- elif question_answer is sequence and question is not string %}
        {%- for question_answer_detail in question_answer %}
          {%- if question_answer_detail is defined %}
            #
            ## question_answer_detail is string
            #
            {%- if question_answer_detail is string %}
{#         -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail }}.sls
{#         -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail }}/init.sls
            #
            ## question_answer_detail is dict
            #
            {%- elif question_answer_detail is mapping %}
              {%- for question_answer_detail_iter, discard_var in question_answer_detail.iteritems() %}
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}.sls
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}/init.sls
              {%- endfor %}
            #
            ## question_answer_detail is list
            #
            {%- elif question_answer_detail is sequence and question_answer_detail is not string %}
              {%- for question_answer_detail_iter in question_answer_detail %}
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}.sls
{#           -#}{{ lookup_namespace }}/{{ question }}/{{ question_answer }}/{{ question_answer_detail_iter }}/init.sls
              {%- endfor %}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%- endif %}


# GeMa Secondary Labels
  

## <examples>
  #
  #core.yml
  #osarchs/{{ __grains__['osarch'] }}.yml
  #oscodenames/{{ __grains__['oscodename'] }}.yml
  #{%- for role in pillar.get('machine_roles', []) %}
  #roles/{{ role }}.yml
  #{%- endfor %}
  #minions/{{ minion_id }}.yml
## </examples>



## EOF
